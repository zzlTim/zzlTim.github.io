[{"content":"用户认证一般流程 用户向服务器发送用户名和密码 服务器验证通过后，在当前对话（session）保存相关数据，比如登录时间 服务器返回一个session_id,写入用户的cooKie 用户之后的每一次请求，都会通过cookie，将session_id传回服务器 服务器根据session_id，找到之前保存的数据，得知用户身份\n但是这样session扩展性不好，多台服务器如何共享session 每次请求服务，分配的服务器可能不同 ①session持久化，写入数据库 ②数据保存在客户端，每次请求都发回服务器，Token认证就是代表\nToken是服务端产生的字符串，是客户端访问资源节课（API）所需的资源凭证， 客户端使用用户名和密码，服务端收到请求，验证 验证成功，服务器会签发一个token病把这个token发送给客户端 客户端收到token后，会存起来，放到cookie或者localstorage 客户端每次请求服务器都要带这个签发的token（令牌） 服务端收到请求，去验证token，验证成功就返回它请求的数据\ntoken方法服务器不存数据，因此减轻压力 但是解析token需要时间，因此用时间换空间 token由应用管理，可以避开同源策略\nJWT是JSON Web Token JWT原理是，服务器认证后，生产一个json对象，发回给用户 {“姓名”：’111‘, \u0026ldquo;角色\u0026rdquo;：‘root’, “到期时间”:\u0026lsquo;2022-2-2-0:0\u0026rsquo; } 每次通信，都要发回这个json对象，服务器完全靠这个认证用户身份 为了防止用户篡改，会生产对象时加上签名\nJWT有3部分 header头部 payload负载 signature签名 最终组合为一个字符串，用.分开 Header部分是一个json对象，描述JWT的元数据，例如签名算法“alg”:\u0026ldquo;HS256\u0026rdquo;,令牌类型‘type’：‘JWT’ payload也是json，存实际需要传递的数据选用，客户也看得到 signature只有服务器知道，利用签名header的签名算法生成签名\nJWT可以存在cookie也可以存在localSTORAGE 但是这样不能跨域 所以最好放在HTTP请求的头信息“authorization”\n","date":"2024-04-21T00:00:00Z","image":"http://localhost:1313/2.jpg","permalink":"http://localhost:1313/p/jwt%E8%B7%A8%E5%9F%9F/","title":"JWT跨域"},{"content":"https://panjiachen.github.io/vue-element-admin-site/zh/\n错误： git SSL certificate problem: unable to get local issuer certificate\n这个问题是由于没有配置信任的服务器HTTPS验证。默认，cURL被设为不信任任何CAs，就是说，它不信任任何服务器验证。\n只需要执行下面命令就可以解决：\n1 git config --global http.sslVerify false 安装失败可以看这个\n","date":"2024-04-21T00:00:00Z","image":"http://localhost:1313/2.jpg","permalink":"http://localhost:1313/p/vue-element-admin%E5%90%8E%E5%8F%B0%E9%9B%86%E6%88%90%E6%96%B9%E6%A1%88/","title":"vue-element-admin后台集成方案"},{"content":"大型应用往往跨越多个组件。通过多层嵌套传递参数十分复杂，并且Vue没有兄弟组件之间直接共享参数的方法。\nhttps://vuex.vuejs.org/zh/guide/ VueX是专为Vue.js开发的状态管理库。集中式存储管理所有组件的状态 简单地说，VueX管理分散在Vue中的各组件的数据 npm install vuex@next (下载最新的)\nvue2\u0026ndash;vuex3 vue3\u0026ndash;vuex4\n一般大项目才用 每个Vuex的核心都是一个store,与普通的全局对象不同的是，Vue数据和视图绑定，数据改变，绑定的视图也会被重新渲染。 store中的状态不允许直接修改，只能通过提交(commit)mutation这可以让我们跟踪状态的变化\nVuex： State,Getter,Mutation（改变、转变）,Action,Module State 可以使用this.$store.state.count访问数据源 也可以用mapstate辅助函数将其映射下来 修改state就要通过我们定义的方法去修改 mutation只能做一下同步操作，action可以异步操作 不太懂。。。\n安装VUEX@3失败可能是因为证书过期了 https://blog.csdn.net/qq_42761482/article/details/121018086\n通过commit修改store内容\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;hello\u0026#34; \u0026gt; {{ this.$store.state.count }} \u0026lt;button @click=\u0026#34;add\u0026#34;\u0026gt;+1\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { name: \u0026#39;HelloWorld\u0026#39;, methods:{ add(){ this.$store.commit(\u0026#34;increment\u0026#34;) //this.$store.state.count = this.$store.state.count + 1 } } } \u0026lt;/script\u0026gt; 还可以通过compute获取动态数据\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;hello\u0026#34; \u0026gt; \u0026lt;!-- {{ this.$store.state.count }} --\u0026gt; {{ count }} \u0026lt;button @click=\u0026#34;add\u0026#34;\u0026gt;+1\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { name: \u0026#39;HelloWorld\u0026#39;, computed: { count(){ return this.$store.state.count } }, methods:{ add(){ this.$store.commit(\u0026#34;increment\u0026#34;) //this.$store.state.count = this.$store.state.count + 1 } } } \u0026lt;/script\u0026gt; 也可以通过mapstate取数据,看不懂。。可以去看官网？ computed:mapState([ \u0026lsquo;count\u0026rsquo; ])\n可能需要了解filter函数\n1 2 3 4 5 getters:{ doneTodos:state =\u0026gt; { return state.todos.filter(todo =\u0026gt; todo.done) } } Helloworld也可以这么写，是映射，调用index里面写的getters\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 export default { name: \u0026#39;HelloWorld\u0026#39;, computed:{ ...mapState([ \u0026#39;count\u0026#39;,\u0026#39;todos\u0026#39; ]), ...mapGetters([ \u0026#39;doneTodos\u0026#39; ]) }, methods:{ add(){ this.$store.commit(\u0026#34;increment\u0026#34;) //this.$store.state.count = this.$store.state.count + 1 } } } \u0026lt;/script\u0026gt; ","date":"2024-04-21T00:00:00Z","image":"http://localhost:1313/2.jpg","permalink":"http://localhost:1313/p/vuex/","title":"vuex"},{"content":"\r#\r0基础教学\r#\r博文头信息解析\rtitle: 博文标题\ndescription: 副标题/博文描述\ndate: 日期2024-04-21\nslug: 博文代号/博文url/若使用已有的slug，则会直接覆盖，因为文件目录唯一 image: 封面图片.jpg\ncategories:\n博文标签1 博文标签2 #\r网站图片插入问题\rHugo 静态网站图片插入问题\n新版hugo-stack直接复制example的内容会出现无法加载图片的问题。 因为对于新版的的hugo主题，他默认静态资源都是存储在static文件夹下， 所以图片路径不能存放到.md同目录，而是需要放到static文件夹，同时保持相对路径。\n#\rMarkDown常用语法\rMarkDown常用语法\n#\r插入图片\r1 2 ![测试图片相对路径](./1.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) 控制菜单栏的文件目录\n\\content\\page\\\n头信息解析\n1 2 3 4 5 6 7 title: \u0026#34;标题\u0026#34; layout: \u0026#34;查找3\u0026#34; # 搞不懂 menu: main: weight: 100 #控制菜单项位置顺序，数值越大越下面，越小越上面 params: icon: user #图标去网站看代码 #\r头像路径\r\\themes\\hugo-theme-stack\\assets\\img 其实可以直接改路径，但是还是直接替换原图片最简单好懂\n","date":"2024-04-21T00:00:00Z","image":"http://localhost:1313/2.jpg","permalink":"http://localhost:1313/p/hugo-problems/","title":"使用hugo-stack遇到的问题和解决方法"},{"content":"onenote for windows 10 优雅,无需多言 https://apps.microsoft.com/store/detail/onenote/9WZDNCRFHVJL?hl=en-us\u0026ql=us\n","date":"2024-04-21T00:00:00Z","image":"http://localhost:1313/2.jpg","permalink":"http://localhost:1313/p/%E6%9C%80%E4%BC%98%E9%9B%85%E7%9A%84onenote/","title":"最优雅的OneNote"},{"content":"此次作业其实花了很多经理在遇到和处理各种奇奇怪怪的bug，很多是因为github pages部署时是把整个项目文件都放到仓库，然后进行转化为index.html让github pages自动识别展示这里出现的，所以这次我直接把public的内容放到githubpages，完整项目分开放，这样就不会因为分支，git管理等等问题困扰，前面走了不少弯路最终还是就这样吧。\n个人博客这些搭建工具，主题功能都大差不差，最关键的区别还是主题美观，和契合度。如果作为推荐或分享的话，我肯定会推荐hugo-stack作为主题，因为太漂亮了。\n","date":"2024-04-21T00:00:00Z","image":"http://localhost:1313/2.jpg","permalink":"http://localhost:1313/p/%E4%BD%9C%E4%B8%9A%E6%80%BB%E7%BB%93/","title":"作业总结"}]